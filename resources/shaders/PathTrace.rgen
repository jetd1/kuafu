#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_ARB_shader_clock : enable

#include "base/Camera.glsl"
#include "base/PushConstants.glsl"
#include "base/Ray.glsl"
#include "base/Sampling.glsl"

layout( location = 0 ) rayPayloadEXT RayPayLoad ray;
layout( location = 1 ) rayPayloadEXT bool isShadowed;
layout( location = 2 ) rayPayloadEXT RayPayLoad shadowRay;

layout( binding = 0, set = 0 ) uniform accelerationStructureEXT topLevelAS;
layout( binding = 1, set = 0, rgba32f ) uniform image2D image;
layout( binding = 2, set = 0, rgba32f ) uniform image2D albedoImage;
layout( binding = 3, set = 0, rgba32f ) uniform image2D normalImage;

void main( )
{
  // maps an entry in the 2D array (image grid) to a 1D array
  uint mapping = gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x;
  uint seed    = tea( mapping, int( clockARB( ) ) );
  vec3 colors  = vec3( 0.0 );
  vec3 albedo  = vec3( 0.0 );
  vec3 normal  = vec3( 0.0 );

  uint timeStart = uint( clockARB( ) );

  for ( uint i = 0; i < sampleRatePerPixel; ++i )
  {
    ray.seed = tea( gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x, int( clockARB( ) ) );

    // Jitter position within pixel to get free AA.
    vec2 positionWithinPixel   = vec2( gl_LaunchIDEXT.xy ) + vec2( rnd( seed ), rnd( seed ) );
    const vec2 normalizedPixel = positionWithinPixel / vec2( gl_LaunchSizeEXT.xy );
    vec2 d                     = normalizedPixel * 2.0 - 1.0;

    // depth of field
    float aperture      = cam.position.w;
    float focusDistance = cam.viewingDirection.w;
    vec2 offset         = aperture / 2.0 * diskSampling( ray.seed );

    vec4 origin, direction;
    vec4 target = cam.projInverse * vec4( d.x, d.y, 1.0, 1.0 );

    if ( aperture > 0.0 )
    {
      origin    = cam.viewInverse * vec4( offset, 0.0, 1.0 );
      direction = cam.viewInverse * vec4( normalize( target.xyz * focusDistance - vec3( offset, 0.0 ) ), 0.0 );
    }
    else
    {
      origin    = cam.viewInverse * vec4( 0.0, 0.0, 0.0, 1.0 );
      direction = cam.viewInverse * vec4( normalize( target.xyz ), 0.0 );
    }

    ray.direction  = direction.xyz;
    ray.origin     = origin.xyz;
    ray.weight     = vec3( 0.0 );
    ray.emission   = vec3( 1.0 );
    ray.albedo     = vec3( 0.0 );
    ray.normal     = vec3( 0.0 );
    ray.refractive = false;
    ray.type       = 0;             // view ray
    ray.shadow_color = vec3(0.0);

    vec3 weight = vec3( 1.0 );
    vec3 color  = vec3( 0.0 );

    uint rayFlags = gl_RayFlagsNoneEXT;
    float tMin    = 0.001;
    float tMax    = 10000.0;

    int refractionCounter = 0;

    for ( ray.depth = 0; ray.depth <= maxPathDepth; ++ray.depth )
    {
      if (ray.depth > 0) {
        ray.type = 2;
      }

      // TODO: kuafu_urgent: Push Constant
//      // refractive rays are allowed to bounce more time to have the all effects at lower sample rates
//      if ( ray.refractive )
//      {
//        ray.depth -= 1;
//        ++refractionCounter;
//      }
//
//      // but to make sure this is not an endless loop, quit after five refraction bounces
//      if ( refractionCounter > 6 )
//      {
//        ray.depth = maxPathDepth + 1;
//      }

      traceRayEXT( topLevelAS,    // acceleration structure
                   rayFlags,      // rayFlags
                   0xFF,          // cullMask
                   0,             // sbtRecordOffset
                   0,             // sbtRecordStride
                   0,             // missIndex
                   ray.origin,    // ray origin
                   tMin,          // ray min range
                   ray.direction, // ray direction
                   tMax,          // ray max range
                   0 );           // payload (location = 0)

      color += ray.emission * weight;
      weight *= ray.weight;
      color += ray.shadow_color * weight;
      ray.shadow_color = vec3(0.);

      if (i == 0 && ray.depth == 0) {
        albedo = ray.albedo;
        normal = ray.normal;
      }

      if (weight == vec3(0.))
        break;

      // Russian roulette
      // Randomly terminate a path with a probability inversely equal to the throughput
      if ( russianRoulette && ray.depth >= russianRouletteMinBounces )
      {
        float p = max( weight.x, max( weight.y, weight.z ) );
        //float rand = clamp( rnd( ray.seed ), 0.0, 1.0 );
        float rand = rnd( ray.seed );

        if ( rand > p )
        {
          //ray.depth = maxPathDepth + 1;
          break;
        }

        // Add the energy "lost" by randomly terminating paths (this only happens if a ray was not terminated)
        weight *= 1.0 / p;
      }
    }
    colors += color;
  }

  // weighted average
  vec3 finalColor = colors / sampleRatePerPixel;

  // tone mapping
  //const float limit = 1.5;
  //float luminance   = 0.3 * finalColor.x + 0.6 * finalColor.y + 0.1 * finalColor.z;
  //finalColor *= ( 1.0 / ( 1.0 + luminance / limit ) );

  // Interpolate results over time (length defined on host as frame count (int))
  // First frame
  if ( frameCount <= 0 )
  {
    imageStore( image, ivec2( gl_LaunchIDEXT.xy ), vec4( finalColor, 1.0 ) );
  }
  // Following frames: linearly interpolate between previous and current color.
  else
  {
    vec3 oldColor = imageLoad( image, ivec2( gl_LaunchIDEXT.xy ) ).xyz;
    vec4 temp     = vec4( mix( oldColor, finalColor, 1.0 / float( frameCount + 1 ) ), 1.0 );
    imageStore( image, ivec2( gl_LaunchIDEXT.xy ), temp );
  }

  imageStore( albedoImage, ivec2( gl_LaunchIDEXT.xy ), vec4( albedo, 1.0 ) );
  imageStore( normalImage, ivec2( gl_LaunchIDEXT.xy ), vec4( normal, 1.0 ) );
}
